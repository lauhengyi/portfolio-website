/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three';
import React, { useEffect } from 'react';
import { Center, useGLTF } from '@react-three/drei';
import { GLTF } from 'three-stdlib';

type GLTFResult = GLTF & {
  nodes: {
    Text: THREE.Mesh;
  };
};

export default function AboutMeText(props: JSX.IntrinsicElements['group']) {
  const { nodes } = useGLTF('/models/aboutMe.glb') as GLTFResult;
  const textRef = React.useRef<THREE.Group>(null);

  function resizeText() {
    if (!textRef.current) return;
    const aspect = window.innerWidth / window.innerHeight;
    const clampedAspect = Math.min(aspect, 1.8);
    const multiplier = 18;
    const scale = clampedAspect * multiplier;
    textRef.current.scale.set(scale, 1, scale);
  }
  useEffect(() => {
    resizeText();
    addEventListener('resize', () => {
      resizeText();
    });
  }, []);
  return (
    <Center
      ref={textRef}
      position={[0, 35, -30.05]}
      rotation-x={Math.PI * 0.5}
      scale={20}
    >
      <group {...props} dispose={null}>
        <mesh geometry={nodes.Text.geometry}>
          <meshBasicMaterial color="#ffffff" />
        </mesh>
      </group>
    </Center>
  );
}

useGLTF.preload('/models/aboutMe.glb');
