/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import * as THREE from 'three';
import React, { useRef, useEffect } from 'react';
import { useGLTF, useTexture } from '@react-three/drei';
import { GLTF } from 'three-stdlib';
import { useFrame } from '@react-three/fiber';

type GLTFResult = GLTF & {
  nodes: {
    car: THREE.Mesh;
  };
};

export default function Cars() {
  const { nodes } = useGLTF('/car.glb') as GLTFResult;
  const bakedCarAtlas = useTexture('/bakedCarAtlas.jpg');
  const carRef = useRef<THREE.InstancedMesh>(null!);
  bakedCarAtlas.flipY = false;

  const size = 2;
  const texStep = 1 / size;

  const modifyShader = (shader: THREE.Shader) => {
    shader.vertexShader = `
    	attribute vec2 iUv;
      varying vec2 instUv;
      ${shader.vertexShader}
    `.replace(
      `#include <begin_vertex>`,
      `#include <begin_vertex>
      	instUv = iUv;
      `,
    );
    shader.fragmentShader = `
    	varying vec2 instUv;
    	${shader.fragmentShader}
    `.replace(
      `#include <map_fragment>`,
      `
      #ifdef USE_MAP
        vec4 sampledDiffuseColor = texture2D( map, vUv * 0.5 );

        diffuseColor *= sampledDiffuseColor;
      #endif
    `,
    );
  };

  useFrame(({ clock }) => {
    carRef.current.position.x += 0.01;
  });

  return (
    <group dispose={null}>
      <instancedMesh
        ref={carRef}
        args={[undefined, undefined, 1]}
        geometry={nodes.car.geometry}
        position={[-5, 0.04, 1.56]}
      >
        <meshBasicMaterial map={bakedCarAtlas} onBeforeCompile={modifyShader} />
      </instancedMesh>
    </group>
  );
}

useGLTF.preload('/car.glb');
